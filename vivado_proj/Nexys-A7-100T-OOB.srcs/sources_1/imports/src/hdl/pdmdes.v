//--------------------------------------------------------------------------------------------
//
// Generated by X-HDL VHDL Translator - Version 2.0.0 Feb. 1, 2011
// ?? ?? 29 2023 16:30:51
//
//      Input file      : 
//      Component name  : pdmdes
//      Author          : 
//      Company         : 
//
//      Description     : 
//
//
//--------------------------------------------------------------------------------------------


module PdmDes(clk_i, en_i, done_o, data_o, pdm_m_clk_o, pdm_m_data_i, pdm_lrsel_o, pdm_clk_rising_o);
   parameter                 C_NR_OF_BITS = 16;
   parameter                 C_SYS_CLK_FREQ_MHZ = 75;
   parameter                 C_PDM_FREQ_HZ = 2000000;
   input                     clk_i;
   input                     en_i;
   
   output                    done_o;
   output [C_NR_OF_BITS-1:0] data_o;
   reg [C_NR_OF_BITS-1:0]    data_o;
   
   output                    pdm_m_clk_o;
   input                     pdm_m_data_i;
   output                    pdm_lrsel_o;
   output                    pdm_clk_rising_o;
   reg                       pdm_clk_rising_o;
   
   
   reg [6:0]                 cnt_clk;
   reg                       clk_int;
   
   reg                       pdm_clk_rising;
   
   reg [(C_NR_OF_BITS-1):0]  pdm_tmp;
   reg [4:0]                 cnt_bits;
   
   reg [2:0]                 pdm_clk_rising_reg;
   
   reg                       en_int;
   reg                       done_int;
   
   assign pdm_lrsel_o = 1'b0;
   
   
   always @(posedge clk_i)
   begin: SYNC
      
         en_int <= en_i;
   end
   
   
   always @(posedge clk_i)
   begin: SHFT_IN
      
      begin
         if (pdm_clk_rising == 1'b1)
            pdm_tmp <= {pdm_tmp[C_NR_OF_BITS - 2:0], pdm_m_data_i};
      end
   end
   
   
   always @(posedge clk_i)
   begin: CNT
      
      begin
         if (en_int == 1'b0)
            cnt_bits <= 0;
         else
            if (pdm_clk_rising == 1'b1)
            begin
               if (cnt_bits == (C_NR_OF_BITS - 1))
                  cnt_bits <= 0;
               else
                  cnt_bits <= cnt_bits + 1;
            end
      end
   end
   
   
   always @(posedge clk_i)
      
      begin
         if (pdm_clk_rising == 1'b1)
         begin
            if (cnt_bits == 0)
            begin
               if (en_int == 1'b1)
               begin
                  done_int <= 1'b1;
                  data_o <= pdm_tmp;
               end
            end
         end
         else
            done_int <= 1'b0;
      end
   
   assign done_o = done_int;
   
   
   always @(posedge clk_i)
   begin: CLK_CNT
      
      begin
         if (cnt_clk == (((C_SYS_CLK_FREQ_MHZ * 1000000)/(C_PDM_FREQ_HZ * 2)) - 1))
         begin
            cnt_clk <= 0;
            clk_int <= (~clk_int);
            if (clk_int == 1'b0)
               pdm_clk_rising <= 1'b1;
         end
         else
         begin
            cnt_clk <= cnt_clk + 1;
            pdm_clk_rising <= 1'b0;
         end
      end
   end
   
   assign pdm_m_clk_o = clk_int;
   
   
   always @(posedge clk_i)
   begin: RISING_IMP
      
         pdm_clk_rising_reg <= {pdm_clk_rising_reg[1:0], pdm_clk_rising};
   end
   
   
   always @(posedge clk_i)
   begin: ASSIGN_PDM_CLK_RISING_IMP
      
         pdm_clk_rising_o <= (pdm_clk_rising_reg[0] | pdm_clk_rising_reg[1]) & ((~pdm_clk_rising_reg[2]));
   end
   
endmodule
