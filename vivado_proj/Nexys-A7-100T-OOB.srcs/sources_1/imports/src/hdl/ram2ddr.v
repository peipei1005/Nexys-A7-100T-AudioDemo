//--------------------------------------------------------------------------------------------
//
// Generated by X-HDL VHDL Translator - Version 2.0.0 Feb. 1, 2011
// ?? ?? 29 2023 16:31:00
//
//      Input file      : 
//      Component name  : ram2ddr
//      Author          : 
//      Company         : 
//
//      Description     : 
//
//
//--------------------------------------------------------------------------------------------


module Ram2Ddr(clk_200MHz_i, rst_i, device_temp_i, ui_clk_o, ram_a, ram_dq_i, ram_dq_o, ram_cen, ram_oen, ram_wen, ram_ub, ram_lb, ddr2_addr, ddr2_ba, ddr2_ras_n, ddr2_cas_n, ddr2_we_n, ddr2_ck_p, ddr2_ck_n, ddr2_cke, ddr2_cs_n, ddr2_dm, ddr2_odt, ddr2_dq, ddr2_dqs_p, ddr2_dqs_n);
   input            clk_200MHz_i;
   input            rst_i;
   input [11:0]     device_temp_i;
   output           ui_clk_o;
   input [26:0]     ram_a;
   input [15:0]     ram_dq_i;
   output [15:0]    ram_dq_o;
   reg [15:0]       ram_dq_o;
   input            ram_cen;
   input            ram_oen;
   input            ram_wen;
   input            ram_ub;
   input            ram_lb;
   
   output [12:0]    ddr2_addr;
   output [2:0]     ddr2_ba;
   output           ddr2_ras_n;
   output           ddr2_cas_n;
   output           ddr2_we_n;
   output [0:0]     ddr2_ck_p;
   output [0:0]     ddr2_ck_n;
   output [0:0]     ddr2_cke;
   output [0:0]     ddr2_cs_n;
   output [1:0]     ddr2_dm;
   output [0:0]     ddr2_odt;
   inout [15:0]     ddr2_dq;
   inout [1:0]      ddr2_dqs_p;
   inout [1:0]      ddr2_dqs_n;
   
   
   parameter [2:0]  state_type_stIdle = 0,
                    state_type_stPreset = 1,
                    state_type_stSendData = 2,
                    state_type_stSetCmdRd = 3,
                    state_type_stSetCmdWr = 4,
                    state_type_stWaitCen = 5;
   
   parameter [2:0]  CMD_WRITE = 3'b000;
   parameter [2:0]  CMD_READ = 3'b001;
   
   reg [2:0]        cState;
   reg [2:0]        nState;
   
   wire             mem_ui_clk;
   wire             mem_ui_rst;
   wire             rst;
   reg              rstn;
   reg [1:0]        sreg;
   
   reg [26:0]       ram_a_int;
   reg [15:0]       ram_dq_i_int;
   reg              ram_cen_int;
   reg              ram_oen_int;
   reg              ram_wen_int;
   reg              ram_ub_int;
   reg              ram_lb_int;
   
   reg [26:0]       mem_addr;
   reg [2:0]        mem_cmd;
   reg              mem_en;
   wire             mem_rdy;
   wire             mem_wdf_rdy;
   reg [127:0]      mem_wdf_data;
   reg              mem_wdf_end;
   reg [15:0]       mem_wdf_mask;
   reg              mem_wdf_wren;
   wire [127:0]     mem_rd_data;
   wire             mem_rd_data_end;
   wire             mem_rd_data_valid;
   wire             calib_complete;
   
   assign ui_clk_o = mem_ui_clk;
   
   always @(posedge clk_200MHz_i)
   begin: RSTSYNC
      
      begin
         sreg <= {sreg[0], rst_i};
         rstn <= (~sreg[1]);
      end
   end
   
   
   ddr Inst_DDR(.ddr2_dq(ddr2_dq), .ddr2_dqs_p(ddr2_dqs_p), .ddr2_dqs_n(ddr2_dqs_n), .ddr2_addr(ddr2_addr), .ddr2_ba(ddr2_ba), .ddr2_ras_n(ddr2_ras_n), .ddr2_cas_n(ddr2_cas_n), .ddr2_we_n(ddr2_we_n), .ddr2_ck_p(ddr2_ck_p), .ddr2_ck_n(ddr2_ck_n), .ddr2_cke(ddr2_cke), .ddr2_cs_n(ddr2_cs_n), .ddr2_dm(ddr2_dm), .ddr2_odt(ddr2_odt), .sys_clk_i(clk_200MHz_i), .sys_rst(rstn), .app_addr(mem_addr), .app_cmd(mem_cmd), .app_en(mem_en), .app_wdf_data(mem_wdf_data), .app_wdf_end(mem_wdf_end), .app_wdf_mask(mem_wdf_mask), .app_wdf_wren(mem_wdf_wren), .app_rd_data(mem_rd_data), .app_rd_data_end(mem_rd_data_end), .app_rd_data_valid(mem_rd_data_valid), .app_rdy(mem_rdy), .app_wdf_rdy(mem_wdf_rdy), .app_sr_req(1'b0), .app_sr_active(), .app_ref_req(1'b0), .app_ref_ack(), .app_zq_req(1'b0), .app_zq_ack(), .ui_clk(mem_ui_clk), .ui_clk_sync_rst(mem_ui_rst), .device_temp_i(device_temp_i), .init_calib_complete(calib_complete));
   
   
   always @(posedge mem_ui_clk)
   begin: REG_IN
      
      begin
         ram_a_int <= ram_a;
         ram_dq_i_int <= ram_dq_i;
         ram_cen_int <= ram_cen;
         ram_oen_int <= ram_oen;
         ram_wen_int <= ram_wen;
         ram_ub_int <= ram_ub;
         ram_lb_int <= ram_lb;
      end
   end
   
   
   always @(posedge mem_ui_clk)
   begin: SYNC_PROCESS
      
      begin
         if (mem_ui_rst == 1'b1)
            cState <= state_type_stIdle;
         else
            cState <= nState;
      end
   end
   
   
   always @(cState or calib_complete or ram_cen_int or mem_rdy or mem_wdf_rdy)
   begin: NEXT_STATE_DECODE
      nState <= cState;
      case (cState)
         state_type_stIdle :
            if (ram_cen_int == 1'b0 & calib_complete == 1'b1)
               nState <= state_type_stPreset;
         state_type_stPreset :
            if (ram_wen_int == 1'b0)
               nState <= state_type_stSendData;
            else if (ram_oen_int == 1'b0)
               nState <= state_type_stSetCmdRd;
         state_type_stSendData :
            if (mem_wdf_rdy == 1'b1)
               nState <= state_type_stSetCmdWr;
         state_type_stSetCmdRd :
            if (mem_rdy == 1'b1)
               nState <= state_type_stWaitCen;
         state_type_stSetCmdWr :
            if (mem_rdy == 1'b1)
               nState <= state_type_stWaitCen;
         state_type_stWaitCen :
            if (ram_cen_int == 1'b1)
               nState <= state_type_stIdle;
         default :
            nState <= state_type_stIdle;
      endcase
   end
   
   
   always @(cState)
   begin: MEM_WR_CTL
      if (cState == state_type_stSendData)
      begin
         mem_wdf_wren <= 1'b1;
         mem_wdf_end <= 1'b1;
      end
      else
      begin
         mem_wdf_wren <= 1'b0;
         mem_wdf_end <= 1'b0;
      end
   end
   
   
   always @(cState)
   begin: MEM_CTL
      if (cState == state_type_stSetCmdRd)
      begin
         mem_en <= 1'b1;
         mem_cmd <= CMD_READ;
      end
      else if (cState == state_type_stSetCmdWr)
      begin
         mem_en <= 1'b1;
         mem_cmd <= CMD_WRITE;
      end
      else
      begin
         mem_en <= 1'b0;
         mem_cmd <= {3{1'b0}};
      end
   end
   
   
   always @(posedge mem_ui_clk)
   begin: WR_DATA_MSK
      
      begin
         if (cState == state_type_stPreset)
            case (ram_a_int[3:1])
               3'b000 :
                  if (ram_ub_int == 1'b0 & ram_lb_int == 1'b1)
                     mem_wdf_mask <= 16'b1111111111111101;
                  else if (ram_ub_int == 1'b1 & ram_lb_int == 1'b0)
                     mem_wdf_mask <= 16'b1111111111111110;
                  else
                     mem_wdf_mask <= 16'b1111111111111100;
               3'b001 :
                  if (ram_ub_int == 1'b0 & ram_lb_int == 1'b1)
                     mem_wdf_mask <= 16'b1111111111110111;
                  else if (ram_ub_int == 1'b1 & ram_lb_int == 1'b0)
                     mem_wdf_mask <= 16'b1111111111111011;
                  else
                     mem_wdf_mask <= 16'b1111111111110011;
               3'b010 :
                  if (ram_ub_int == 1'b0 & ram_lb_int == 1'b1)
                     mem_wdf_mask <= 16'b1111111111011111;
                  else if (ram_ub_int == 1'b1 & ram_lb_int == 1'b0)
                     mem_wdf_mask <= 16'b1111111111101111;
                  else
                     mem_wdf_mask <= 16'b1111111111001111;
               3'b011 :
                  if (ram_ub_int == 1'b0 & ram_lb_int == 1'b1)
                     mem_wdf_mask <= 16'b1111111101111111;
                  else if (ram_ub_int == 1'b1 & ram_lb_int == 1'b0)
                     mem_wdf_mask <= 16'b1111111110111111;
                  else
                     mem_wdf_mask <= 16'b1111111100111111;
               3'b100 :
                  if (ram_ub_int == 1'b0 & ram_lb_int == 1'b1)
                     mem_wdf_mask <= 16'b1111110111111111;
                  else if (ram_ub_int == 1'b1 & ram_lb_int == 1'b0)
                     mem_wdf_mask <= 16'b1111111011111111;
                  else
                     mem_wdf_mask <= 16'b1111110011111111;
               3'b101 :
                  if (ram_ub_int == 1'b0 & ram_lb_int == 1'b1)
                     mem_wdf_mask <= 16'b1111011111111111;
                  else if (ram_ub_int == 1'b1 & ram_lb_int == 1'b0)
                     mem_wdf_mask <= 16'b1111101111111111;
                  else
                     mem_wdf_mask <= 16'b1111001111111111;
               3'b110 :
                  if (ram_ub_int == 1'b0 & ram_lb_int == 1'b1)
                     mem_wdf_mask <= 16'b1101111111111111;
                  else if (ram_ub_int == 1'b1 & ram_lb_int == 1'b0)
                     mem_wdf_mask <= 16'b1110111111111111;
                  else
                     mem_wdf_mask <= 16'b1100111111111111;
               3'b111 :
                  if (ram_ub_int == 1'b0 & ram_lb_int == 1'b1)
                     mem_wdf_mask <= 16'b0111111111111111;
                  else if (ram_ub_int == 1'b1 & ram_lb_int == 1'b0)
                     mem_wdf_mask <= 16'b1011111111111111;
                  else
                     mem_wdf_mask <= 16'b0011111111111111;
               default :
                  ;
            endcase
      end
   end
   
   
   always @(posedge mem_ui_clk)
   begin: WR_DATA_ADDR
      
      begin
         if (cState == state_type_stPreset)
            mem_wdf_data <= {ram_dq_i_int, ram_dq_i_int, ram_dq_i_int, ram_dq_i_int, ram_dq_i_int, ram_dq_i_int, ram_dq_i_int, ram_dq_i_int};
      end
   end
   
   
   always @(posedge mem_ui_clk)
   begin: WR_ADDR
      
      begin
         if (cState == state_type_stPreset)
            mem_addr <= {ram_a_int[26:4], 4'b0000};
      end
   end
   
   
   always @(posedge mem_ui_clk)
   begin: RD_DATA
      
      begin
         if (cState == state_type_stWaitCen & mem_rd_data_valid == 1'b1 & mem_rd_data_end == 1'b1)
            case (ram_a_int[3:1])
               3'b000 :
                  if (ram_ub_int == 1'b0 & ram_lb_int == 1'b1)
                     ram_dq_o <= {mem_rd_data[15:8], mem_rd_data[15:8]};
                  else if (ram_ub_int == 1'b1 & ram_lb_int == 1'b0)
                     ram_dq_o <= {mem_rd_data[7:0], mem_rd_data[7:0]};
                  else
                     ram_dq_o <= mem_rd_data[15:0];
               3'b001 :
                  if (ram_ub_int == 1'b0 & ram_lb_int == 1'b1)
                     ram_dq_o <= {mem_rd_data[31:24], mem_rd_data[31:24]};
                  else if (ram_ub_int == 1'b1 & ram_lb_int == 1'b0)
                     ram_dq_o <= {mem_rd_data[23:16], mem_rd_data[23:16]};
                  else
                     ram_dq_o <= mem_rd_data[31:16];
               3'b010 :
                  if (ram_ub_int == 1'b0 & ram_lb_int == 1'b1)
                     ram_dq_o <= {mem_rd_data[47:40], mem_rd_data[47:40]};
                  else if (ram_ub_int == 1'b1 & ram_lb_int == 1'b0)
                     ram_dq_o <= {mem_rd_data[39:32], mem_rd_data[39:32]};
                  else
                     ram_dq_o <= mem_rd_data[47:32];
               3'b011 :
                  if (ram_ub_int == 1'b0 & ram_lb_int == 1'b1)
                     ram_dq_o <= {mem_rd_data[63:56], mem_rd_data[63:56]};
                  else if (ram_ub_int == 1'b1 & ram_lb_int == 1'b0)
                     ram_dq_o <= {mem_rd_data[55:48], mem_rd_data[55:48]};
                  else
                     ram_dq_o <= mem_rd_data[63:48];
               3'b100 :
                  if (ram_ub_int == 1'b0 & ram_lb_int == 1'b1)
                     ram_dq_o <= {mem_rd_data[79:72], mem_rd_data[79:72]};
                  else if (ram_ub_int == 1'b1 & ram_lb_int == 1'b0)
                     ram_dq_o <= {mem_rd_data[71:64], mem_rd_data[71:64]};
                  else
                     ram_dq_o <= mem_rd_data[79:64];
               3'b101 :
                  if (ram_ub_int == 1'b0 & ram_lb_int == 1'b1)
                     ram_dq_o <= {mem_rd_data[95:88], mem_rd_data[95:88]};
                  else if (ram_ub_int == 1'b1 & ram_lb_int == 1'b0)
                     ram_dq_o <= {mem_rd_data[87:80], mem_rd_data[87:80]};
                  else
                     ram_dq_o <= mem_rd_data[95:80];
               3'b110 :
                  if (ram_ub_int == 1'b0 & ram_lb_int == 1'b1)
                     ram_dq_o <= {mem_rd_data[111:104], mem_rd_data[111:104]};
                  else if (ram_ub_int == 1'b1 & ram_lb_int == 1'b0)
                     ram_dq_o <= {mem_rd_data[103:96], mem_rd_data[103:96]};
                  else
                     ram_dq_o <= mem_rd_data[111:96];
               3'b111 :
                  if (ram_ub_int == 1'b0 & ram_lb_int == 1'b1)
                     ram_dq_o <= {mem_rd_data[127:120], mem_rd_data[127:120]};
                  else if (ram_ub_int == 1'b1 & ram_lb_int == 1'b0)
                     ram_dq_o <= {mem_rd_data[119:112], mem_rd_data[119:112]};
                  else
                     ram_dq_o <= mem_rd_data[127:112];
               default :
                  ;
            endcase
      end
   end
   
endmodule

