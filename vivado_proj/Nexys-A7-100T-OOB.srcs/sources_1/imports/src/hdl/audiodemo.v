//--------------------------------------------------------------------------------------------
//
// Generated by X-HDL VHDL Translator - Version 2.0.0 Feb. 1, 2011
// ?? ?? 29 2023 16:30:34
//
//      Input file      : 
//      Component name  : audiodemo
//      Author          : 
//      Company         : 
//
//      Description     : 
//
//
//--------------------------------------------------------------------------------------------


module AudioDemo(clk_200_i, device_temp_i, rst_i, btn_u, leds_o, pdm_m_clk_o, pdm_m_data_i, pdm_lrsel_o, pwm_audio_o, pwm_sdaudio_o, ddr2_addr, ddr2_ba, ddr2_ras_n, ddr2_cas_n, ddr2_we_n, ddr2_ck_p, ddr2_ck_n, ddr2_cke, ddr2_cs_n, ddr2_dm, ddr2_odt, ddr2_dq, ddr2_dqs_p, ddr2_dqs_n, pdm_clk_rising_o);
   input            clk_200_i;
   input [11:0]     device_temp_i;
   input            rst_i;
   
   input            btn_u;
   output [15:0]    leds_o;
   
   output           pdm_m_clk_o;
   input            pdm_m_data_i;
   output           pdm_lrsel_o;
   
   inout            pwm_audio_o;
   output           pwm_sdaudio_o;
   reg              pwm_sdaudio_o;
   
   output [12:0]    ddr2_addr;
   output [2:0]     ddr2_ba;
   output           ddr2_ras_n;
   output           ddr2_cas_n;
   output           ddr2_we_n;
   output [0:0]     ddr2_ck_p;
   output [0:0]     ddr2_ck_n;
   output [0:0]     ddr2_cke;
   output [0:0]     ddr2_cs_n;
   output [1:0]     ddr2_dm;
   output [0:0]     ddr2_odt;
   inout [15:0]     ddr2_dq;
   inout [1:0]      ddr2_dqs_p;
   inout [1:0]      ddr2_dqs_n;
   
   output           pdm_clk_rising_o;
   
   
   parameter        SECONDS_TO_RECORD = 5;
   parameter        PDM_FREQ_HZ = 2000000;
   parameter        SYS_CLK_FREQ_MHZ = 100;
   parameter        NR_OF_BITS = 16;
   parameter        NR_SAMPLES_TO_REC = (((SECONDS_TO_RECORD * PDM_FREQ_HZ)/NR_OF_BITS) - 1);
   parameter        RW_CYCLE_NS = 1200;
   
   parameter [1:0]  state_type_stIdle = 0,
                    state_type_stRecord = 1,
                    state_type_stInter = 2,
                    state_type_stPlayback = 3;
   
   reg [1:0]        state;
   reg [1:0]        next_state;
   
   wire             btnu_int;
   reg              rnw_int;
   reg [31:0]       addr_int;
   wire             done_int;
   wire             pwm_audio_o_int;
   
   wire             ui_clk;
   wire             clk_i;
   
   reg              en_des;
   reg              done_des;
   wire             done_async_des;
   wire [15:0]      data_des;
   reg [31:0]       data_dess;
   reg [31:0]       addr_rec;
   integer          cntRecSamples;
   reg              done_des_dly;
   
   reg              en_ser;
   reg              done_ser;
   wire             rd_ack_int;
   wire [31:0]      data_ser;
   reg [15:0]       data_serr;
   wire             done_async_ser;
   reg [31:0]       addr_play;
   integer          cntPlaySamples;
   reg              done_ser_dly;
   
   reg              en_leds;
   reg              rnl_int;
   
   wire [26:0]      mem_a;
   wire [26:0]      mem_a_int;
   wire [15:0]      mem_dq_i;
   wire [15:0]      mem_dq_o;
   wire             mem_cen;
   wire             mem_oen;
   wire             mem_wen;
   wire             mem_ub;
   wire             mem_lb;
   
   assign clk_i = ui_clk;
   
   
   Dbncr #(4095) Btnu(.clk_i(clk_i), .sig_i(btn_u), .pls_o(btnu_int));
   
   
   PdmDes #(NR_OF_BITS, SYS_CLK_FREQ_MHZ, PDM_FREQ_HZ) Deserializer(.clk_i(clk_i), .en_i(en_des), .done_o(done_async_des), .data_o(data_des), .pdm_m_clk_o(pdm_m_clk_o), .pdm_m_data_i(pdm_m_data_i), .pdm_lrsel_o(pdm_lrsel_o), .pdm_clk_rising_o(pdm_clk_rising_o));
   
   
   RamCntrl #(RW_CYCLE_NS) RAM(.clk_i(clk_i), .rst_i(rst_i), .rnw_i(rnw_int), .be_i(4'b0011), .addr_i(addr_int), .data_i(data_dess), .cs_i(done_int), .data_o(data_ser), .rd_ack_o(rd_ack_int), .wr_ack_o(), .Mem_A(mem_a), .Mem_DQ_O(mem_dq_i), .Mem_DQ_I(mem_dq_o), .Mem_DQ_T(), .Mem_CEN(mem_cen), .Mem_OEN(mem_oen), .Mem_WEN(mem_wen), .Mem_UB(mem_ub), .Mem_LB(mem_lb));
   
   
   Ram2Ddr DDR(.clk_200MHz_i(clk_200_i), .rst_i(rst_i), .device_temp_i(device_temp_i), .ui_clk_o(ui_clk), .ram_a(mem_a), .ram_dq_i(mem_dq_i), .ram_dq_o(mem_dq_o), .ram_cen(mem_cen), .ram_oen(mem_oen), .ram_wen(mem_wen), .ram_ub(mem_ub), .ram_lb(mem_lb), .ddr2_addr(ddr2_addr), .ddr2_ba(ddr2_ba), .ddr2_ras_n(ddr2_ras_n), .ddr2_cas_n(ddr2_cas_n), .ddr2_we_n(ddr2_we_n), .ddr2_ck_p(ddr2_ck_p), .ddr2_ck_n(ddr2_ck_n), .ddr2_cke(ddr2_cke), .ddr2_cs_n(ddr2_cs_n), .ddr2_dm(ddr2_dm), .ddr2_odt(ddr2_odt), .ddr2_dq(ddr2_dq), .ddr2_dqs_p(ddr2_dqs_p), .ddr2_dqs_n(ddr2_dqs_n));
   
   assign done_int = (state == state_type_stRecord) ? done_des : 
                     (state == state_type_stPlayback) ? done_ser : 
                     1'b0;
   
   
   always @(posedge clk_i)
      
      begin
         if (rd_ack_int == 1'b1)
            data_serr <= data_ser[15:0];
         done_des <= done_async_des;
         data_dess <= {16'h0000, data_des};
         done_ser <= done_async_ser;
      end
   
   
   PdmSer #(NR_OF_BITS, SYS_CLK_FREQ_MHZ, PDM_FREQ_HZ) Serializer(.clk_i(clk_i), .en_i(en_ser), .done_o(done_async_ser), .data_i(data_serr), .pwm_audio_o(pwm_audio_o));
   
   
   always @(posedge clk_i)
      
      begin
         if (state == state_type_stRecord)
         begin
            if (done_des == 1'b1)
               cntRecSamples <= cntRecSamples + 1;
            if (done_des_dly == 1'b1)
               addr_rec <= addr_rec + 2'b10;
         end
         else
         begin
            cntRecSamples <= 0;
            addr_rec <= {32{1'b0}};
         end
         done_des_dly <= done_des;
      end
   
   
   always @(posedge clk_i)
      
      begin
         if (state == state_type_stPlayback)
         begin
            if (done_ser == 1'b1)
               cntPlaySamples <= cntPlaySamples + 1;
            if (done_ser_dly == 1'b1)
               addr_play <= addr_play + 2'b10;
         end
         else
         begin
            cntPlaySamples <= 0;
            addr_play <= {32{1'b0}};
         end
         done_ser_dly <= done_ser;
      end
   
   
   always @(posedge clk_i)
   begin: SYNC_PROC
      
      begin
         if (rst_i == 1'b1)
            state <= state_type_stIdle;
         else
            state <= next_state;
      end
   end
   
   
   always @(posedge clk_i)
   begin: OUTPUT_DECODE
      
         case (state)
            state_type_stIdle :
               begin
                  rnw_int <= 1'b0;
                  en_ser <= 1'b0;
                  en_des <= 1'b0;
                  addr_int <= {32{1'b0}};
                  en_leds <= 1'b0;
                  rnl_int <= 1'b0;
                  pwm_sdaudio_o <= 1'b1;
               end
            state_type_stRecord :
               begin
                  rnw_int <= 1'b0;
                  en_ser <= 1'b0;
                  en_des <= 1'b1;
                  addr_int <= addr_rec;
                  en_leds <= 1'b1;
                  rnl_int <= 1'b1;
                  pwm_sdaudio_o <= 1'b1;
               end
            state_type_stInter :
               begin
                  rnw_int <= 1'b0;
                  en_ser <= 1'b0;
                  en_des <= 1'b0;
                  addr_int <= {32{1'b0}};
                  en_leds <= 1'b0;
                  rnl_int <= 1'b0;
                  pwm_sdaudio_o <= 1'b1;
               end
            state_type_stPlayback :
               begin
                  rnw_int <= 1'b1;
                  en_ser <= 1'b1;
                  en_des <= 1'b0;
                  addr_int <= addr_play;
                  en_leds <= 1'b1;
                  rnl_int <= 1'b0;
                  pwm_sdaudio_o <= 1'b1;
               end
            default :
               begin
                  rnw_int <= 1'b0;
                  en_ser <= 1'b0;
                  en_des <= 1'b0;
                  addr_int <= {32{1'b0}};
                  en_leds <= 1'b0;
                  rnl_int <= 1'b0;
                  pwm_sdaudio_o <= 1'b1;
               end
         endcase
   end
   
   
   always @(state or btnu_int or cntRecSamples or cntPlaySamples)
   begin: NEXT_STATE_DECODE
      next_state <= state;
      case (state)
         state_type_stIdle :
            if (btnu_int == 1'b1)
               next_state <= state_type_stRecord;
         state_type_stRecord :
            if (cntRecSamples == NR_SAMPLES_TO_REC)
               next_state <= state_type_stInter;
         state_type_stInter :
            next_state <= state_type_stPlayback;
         state_type_stPlayback :
            if (btnu_int == 1'b1)
               next_state <= state_type_stIdle;
            else if (cntPlaySamples == NR_SAMPLES_TO_REC)
               next_state <= state_type_stIdle;
         default :
            next_state <= state_type_stIdle;
      endcase
   end
   
   
   LedBar #(SYS_CLK_FREQ_MHZ, SECONDS_TO_RECORD) Leds(.clk_i(clk_i), .en_i(en_leds), .rnl_i(rnl_int), .leds_o(leds_o));
   
endmodule
